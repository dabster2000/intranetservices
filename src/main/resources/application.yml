quarkus:
  application:
    name: trustworks-intranet
    base-url: ${APPLICATION_BASE_URL:http://localhost:8080}
  datasource:
    db-kind: mariadb
    jdbc:
      url: ${URL:jdbc:mariadb://localhost:3306/twservices}
      driver: org.mariadb.jdbc.Driver
      min-size: 5
      max-size: 32
      idle-removal-interval: PT1M
    username: ${USERNAME:root}
    password: ${PASSWORD:1606}
  hibernate-orm:
    jdbc:
      statement-batch-size: 32
    second-level-caching-enabled: true
    statistics: true
    unsupported-properties:
      "hibernate.order_inserts": "true"
      "hibernate.order_updates": "true"
  flyway:
    migrate-at-start: true
    baseline-on-migrate: true
    baseline-version: 1.0
    baseline-description: initial baseline
  swagger-ui:
    enable: true
    always-include: true
  mailer:
    auth-methods: LOGIN
    from: no-reply@trustworks.dk
    host: ${SMTPSERVER:email-smtp.eu-west-1.amazonaws.com}
    port: 587
    start-tls: REQUIRED
    username: ${MAILUSERNAME:xx}
    password: ${MAILPASSWORD:xx}
    mock: false
  http:
    limits:
      max-body-size: 40M
      max-form-attribute-size: 40M
    access-log:
      enabled: true
      pattern: common #"...traceId=%{X,traceId} spanId=%{X,spanId}" #common
    port: 9093 #registry.hub.docker.com/
  smallrye-health:
    root-path: /health
  otel:
    enabled: false
  rest-client:
    openai-api:
      url: https://api.openai.com
      scope: jakarta.inject.Singleton
  thread-pool:
    core-threads: 10
    max-threads: 30
  log:
    level: INFO
    category:
      "dk.trustworks":
        level: INFO
      "io.quarkus.http":
        level: INFO
      "org.jboss.resteasy.resteasy_client":
        level: INFO
      "io.quarkus.smallrye.health":
        level: WARN  # This will stop logging health check INFO level messages
      #"io.opentelemetry":
      #  level: DEBUG
    console:
      enable: true
      format: "%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%t] %c{1.} - %m%n"
      #format: "%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n"
      level: DEBUG

# Event type to Kafka topic mapping (used by ConfigTopicMapper)
event-topics:
  CREATE_CLIENT: client.updates
  UPDATE_WORK: work.updates
  MODIFY_CONTRACT_CONSULTANT: contract.consultant.updates
  CREATE_USER: user.status.updates
  UPDATE_USER: user.status.updates
  CREATE_USER_STATUS: user.status.updates
  DELETE_USER_STATUS: user.status.updates
  CREATE_USER_SALARY: user.salary.updates
  UPDATE_USER_SALARY: user.salary.updates
  DELETE_USER_SALARY: user.salary.updates
  CREATE_BANK_INFO: user.status.updates
      #providers: com. #com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider
  #otel:
  #  exporter:
  #    otlp:
  #      endpoint: http://jaeger:4317 #4317
  cache:
    caffeine:
      "employee-data-per-month-cache":
        expire-after-write: 3H
      employee-budgets:
        expire-after-write: 30M  # Expire after 30 minutes
      employee-availability:
        expire-after-write: 30M  # Expire after 30 minutes
      employee-revenue:
        expire-after-write: 30M
      work-cache:
        expire-after-write: 15M  # Expire after 15 minutes for work data
        maximum-size: 10000  # Maximum number of cached entries
      contract-effective-rules:
        expire-after-write: ${feature.contract.overrides.cache.ttl-seconds:3600}s  # Contract rule override cache
        maximum-size: ${feature.contract.overrides.cache.max-size:1000}  # Maximum cached rule sets
      client-health:
        expire-after-write: 1H  # Client health cache (1 hour TTL)
        maximum-size: 1000  # Maximum number of client health entries
      consultant-allocation:
        expire-after-write: 1H  # Consultant allocation cache (1 hour TTL)
        maximum-size: 1000  # Maximum number of allocation entries
      videos:
        expire-after-write: 3H  # Video metadata cache (3 hour TTL)
        maximum-size: 500  # Maximum number of video entries
  s3:
    sync-client:
      type: APACHE
    aws:
      region: eu-west-1
      credentials:
        type: STATIC
        static-provider:
          access-key-id: ${AWS_ACCESS_KEY_ID:xx}
          secret-access-key: ${AWS_SECRET_ACCESS_KEY:xx}
  native:
    additional-build-args:
      - -H:IncludeResources=.*\\.pem
      - -H:IncludeResources=META-INF/resources/.*
      - --initialize-at-run-time=org.apache.commons.logging.impl.Log4JLogger
      - --initialize-at-run-time=io.netty.util.internal.logging.Log4JLogger


mp:
  messaging:
    connector:
      smallrye-kafka:
        bootstrap:
          servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9094}
    outgoing:
      expenses-created-out:
        connector: smallrye-kafka
        topic: expenses.created
        tracing-enabled: true
        key:
          serializer: org.apache.kafka.common.serialization.StringSerializer
        value:
          serializer: org.apache.kafka.common.serialization.StringSerializer
    incoming:
      expenses-created-in:
        connector: smallrye-kafka
        topic: expenses.created
        tracing-enabled: true
        key:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        auto:
          offset:
            reset: earliest
        enable:
          auto:
            commit: false
      user-status-updates:
        connector: smallrye-kafka
        topic: user.status.updates
        tracing-enabled: true
        key:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        auto:
          offset:
            reset: earliest
        enable:
          auto:
            commit: false
      user-salary-updates:
        connector: smallrye-kafka
        topic: user.salary.updates
        tracing-enabled: true
        key:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        auto:
          offset:
            reset: earliest
        enable:
          auto:
            commit: false
      work-updates:
        connector: smallrye-kafka
        topic: work.updates
        tracing-enabled: true
        key:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        auto:
          offset:
            reset: earliest
        enable:
          auto:
            commit: false
      contract-consultant-updates:
        connector: smallrye-kafka
        topic: contract.consultant.updates
        tracing-enabled: true
        key:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        auto:
          offset:
            reset: earliest
        enable:
          auto:
            commit: false
      budget-updates:
        connector: smallrye-kafka
        topic: budget.updates
        tracing-enabled: true
        key:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value:
          deserializer: org.apache.kafka.common.serialization.StringDeserializer
        auto:
          offset:
            reset: earliest
        enable:
          auto:
            commit: false
  jwt:
    verify:
      issuer: https://trustworks.dk
      publickey:
        location: META-INF/resources/publicKey.pem
feature:
  sns:
    enabled: false
  kafka:
    live-producer:
      enabled: true
    consumers:
      shadow: false
  # Contract Rule Override System feature flags
  contract:
    overrides:
      # Master switch - controls all override functionality
      enabled: true  # Set to true to enable override system

      # Sub-feature flags
      api:
        # Control REST API endpoints availability
        enabled: true  # Set to true to expose override APIs
        read-only: false  # Set to true for read-only mode (no creates/updates/deletes)

      ui:
        # Control UI component visibility (used by frontend)
        enabled: true  # Frontend reads this for menu items, buttons

      # Rollout control
      rollout:
        percentage: 100  # Percentage-based rollout (0-100)
        whitelist: ['50b1c03c-3429-4b3b-b0ed-ab5a59f7dc6f', 'bc5e2eab-1119-4d73-aeb9-e8aba4591cfa', 'd27a7fae-9b40-4a4c-9020-e7eb28fa1a75']  # List of contract UUIDs to enable (for pilot testing)

      # Performance tuning
      cache:
        ttl-seconds: 3600  # 1 hour cache (matching spec)
        max-size: 10000    # Max cached rule sets
slack:
  slackApi: https://slack.com/api
  motherSlackBotToken: ${MOTHERSLACKBOTTOKEN:xx}
  adminSlackBotToken: ${ADMINSLACKBOTTOKEN:xx}
invoice-generator:
  apikey: ${INV_GENERATOR:xx}
e-conomics:
  xAppSecretToken: ${XAPPSERCREETTOKEN:none}
  xAgreementGrantToken: ${XAGREEMENTGRANTTOKEN:none}
  journal-number: ${JOURNALNUMBER:15}
  expense-journal-number: ${EXPENSEJOURNALNUMBER:15}
currencyapi:
  key: ${API_KEY:xx}
bucket:
  expenses: expensefiles
  files: trustworksfiles
  videos: tw-video-bucket
claid:
  ai:
    apikey: ${CLAID_APIKEY:xx}
edenai:
  api:
    key: ${EDENAI_APIKEY:xx}
openai:
  api:
    key: ${OPENAI_APIKEY:xx}
  model: gpt-5-nano #gpt-4o-mini
dk:
  trustworks:
    intranet:
      #fileservice:
       # network:
          #PhotoAPI/mp-rest/url: https://api.claid.ai
          #PhotoAPI/mp-rest/providers=dk.trustworks.intranet.network.BearerTokenFilter:
      expenseservice:
        remote:
          EconomicsAPI/mp-rest/url: https://restapi.e-conomic.com
          EconomicsAPIFile/mp-rest/url: https://restapi.e-conomic.com
          EconomicsAPIAccount/mp-rest/url: https://restapi.e-conomic.com
      aggregates:
        accounting:
          salary-buffer-multiplier: 1.02  # 2% buffer for salary calculations
        invoice:
          network:
            InvoiceAPI/mp-rest/url: https://invoice-generator.com
            CurrencyAPI/mp-rest/url: https://api.freecurrencyapi.com
pricingEngine:
  enabled: true