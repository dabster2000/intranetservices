package dk.trustworks.intranet.dto.work;

import dk.trustworks.intranet.dao.workservice.model.WorkFull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.eclipse.microprofile.openapi.annotations.media.Schema;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;

/**
 * Response DTO containing work data grouped by user.
 * Useful for user-centric reports and analytics.
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "Work data grouped by user for the specified period")
public class WorkByUserResponse {

    @Schema(description = "Map of user UUID to their list of work entries",
            required = true)
    private Map<String, List<WorkFull>> workByUser;

    @Schema(description = "Start date of the period (inclusive)",
            example = "2024-01-01",
            required = true)
    private LocalDate fromDate;

    @Schema(description = "End date of the period (exclusive)",
            example = "2024-02-01",
            required = true)
    private LocalDate toDate;

    @Schema(description = "Total number of users with work entries",
            example = "42",
            required = true)
    private Integer userCount;

    @Schema(description = "Total number of work entries across all users",
            example = "1892",
            required = true)
    private Long totalEntries;

    /**
     * Factory method to create WorkByUserResponse from data.
     */
    public static WorkByUserResponse of(Map<String, List<WorkFull>> workByUser,
                                        LocalDate fromDate,
                                        LocalDate toDate) {
        long totalEntries = workByUser.values().stream()
                .mapToLong(List::size)
                .sum();

        return WorkByUserResponse.builder()
                .workByUser(workByUser)
                .fromDate(fromDate)
                .toDate(toDate)
                .userCount(workByUser.size())
                .totalEntries(totalEntries)
                .build();
    }

    /**
     * Get work entries for a specific user.
     * @param userUuid The UUID of the user
     * @return List of work entries or empty list if user not found
     */
    @Schema(hidden = true)
    public List<WorkFull> getWorkForUser(String userUuid) {
        return workByUser.getOrDefault(userUuid, List.of());
    }

    /**
     * Calculate total hours for a specific user.
     * @param userUuid The UUID of the user
     * @return Total hours worked by the user
     */
    @Schema(hidden = true)
    public double getTotalHoursForUser(String userUuid) {
        return getWorkForUser(userUuid).stream()
                .mapToDouble(WorkFull::getWorkduration)
                .sum();
    }

    /**
     * Calculate total revenue for a specific user.
     * @param userUuid The UUID of the user
     * @return Total revenue generated by the user
     */
    @Schema(hidden = true)
    public double getTotalRevenueForUser(String userUuid) {
        return getWorkForUser(userUuid).stream()
                .mapToDouble(w -> w.getWorkduration() * w.getRate())
                .sum();
    }
}