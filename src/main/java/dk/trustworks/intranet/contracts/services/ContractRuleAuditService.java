package dk.trustworks.intranet.contracts.services;

import dk.trustworks.intranet.contracts.model.ContractRuleAudit;
import jakarta.enterprise.context.ApplicationScoped;
import lombok.extern.jbosslog.JBossLog;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Service for querying contract rule audit logs.
 *
 * <p>This service provides read-only access to the audit trail generated by
 * database triggers on contract rule override tables.
 *
 * <p><b>Audit Data Source:</b>
 * - Populated automatically by database triggers on INSERT/UPDATE
 * - Captures old and new values as JSON
 * - Records user ID and timestamp
 *
 * <p><b>Use Cases:</b>
 * <ul>
 *   <li>View change history for a specific contract</li>
 *   <li>Track who modified rules and when</li>
 *   <li>Audit compliance and governance</li>
 *   <li>Rollback/restore previous rule configurations</li>
 * </ul>
 *
 * @see ContractRuleAudit
 */
@ApplicationScoped
@JBossLog
public class ContractRuleAuditService {

    /**
     * Get complete audit history for a contract.
     * Returns all audit entries for all rule types.
     *
     * @param contractUuid The contract UUID
     * @return List of audit entries, ordered by timestamp (newest first)
     */
    public List<ContractRuleAudit> getAuditHistory(String contractUuid) {
        log.debugf("Getting audit history for contract %s", contractUuid);

        List<ContractRuleAudit> audits = ContractRuleAudit.find(
            "entityId = ?1 ORDER BY timestamp DESC",
            contractUuid
        ).list();

        log.debugf("Found %d audit entries for contract %s", audits.size(), contractUuid);
        return audits;
    }

    /**
     * Get audit history for a specific contract and rule.
     * Useful for tracking changes to a single rule over time.
     *
     * @param contractUuid The contract UUID
     * @param ruleId The rule ID
     * @return List of audit entries for the specified rule, ordered by timestamp (newest first)
     */
    public List<ContractRuleAudit> getAuditForRule(String contractUuid, String ruleId) {
        log.debugf("Getting audit history for contract %s, rule %s", contractUuid, ruleId);

        List<ContractRuleAudit> audits = ContractRuleAudit.find(
            "entityId = ?1 AND ruleId = ?2 ORDER BY timestamp DESC",
            contractUuid, ruleId
        ).list();

        log.debugf("Found %d audit entries for rule %s", audits.size(), ruleId);
        return audits;
    }

    /**
     * Get audit history filtered by entity type (e.g., VALIDATION_OVERRIDE, RATE_OVERRIDE).
     *
     * @param contractUuid The contract UUID
     * @param entityType The entity type to filter by
     * @return List of audit entries for the specified entity type
     */
    public List<ContractRuleAudit> getAuditByType(String contractUuid, String entityType) {
        log.debugf("Getting audit history for contract %s, type %s", contractUuid, entityType);

        List<ContractRuleAudit> audits = ContractRuleAudit.find(
            "entityId = ?1 AND entityType = ?2 ORDER BY timestamp DESC",
            contractUuid, entityType
        ).list();

        log.debugf("Found %d audit entries for type %s", audits.size(), entityType);
        return audits;
    }

    /**
     * Get audit history filtered by action (e.g., INSERT, UPDATE, DELETE).
     *
     * @param contractUuid The contract UUID
     * @param action The action to filter by
     * @return List of audit entries for the specified action
     */
    public List<ContractRuleAudit> getAuditByAction(String contractUuid, String action) {
        log.debugf("Getting audit history for contract %s, action %s", contractUuid, action);

        List<ContractRuleAudit> audits = ContractRuleAudit.find(
            "entityId = ?1 AND action = ?2 ORDER BY timestamp DESC",
            contractUuid, action
        ).list();

        log.debugf("Found %d audit entries for action %s", audits.size(), action);
        return audits;
    }

    /**
     * Get audit history filtered by user.
     * Useful for tracking changes made by a specific user.
     *
     * @param contractUuid The contract UUID
     * @param userId The user ID (email)
     * @return List of audit entries for the specified user
     */
    public List<ContractRuleAudit> getAuditByUser(String contractUuid, String userId) {
        log.debugf("Getting audit history for contract %s, user %s", contractUuid, userId);

        List<ContractRuleAudit> audits = ContractRuleAudit.find(
            "entityId = ?1 AND userId = ?2 ORDER BY timestamp DESC",
            contractUuid, userId
        ).list();

        log.debugf("Found %d audit entries for user %s", audits.size(), userId);
        return audits;
    }

    /**
     * Get audit history within a date range.
     *
     * @param contractUuid The contract UUID
     * @param startDate Start of date range (inclusive)
     * @param endDate End of date range (inclusive)
     * @return List of audit entries within the date range
     */
    public List<ContractRuleAudit> getAuditByDateRange(
        String contractUuid,
        LocalDateTime startDate,
        LocalDateTime endDate
    ) {
        log.debugf("Getting audit history for contract %s between %s and %s",
            contractUuid, startDate, endDate);

        List<ContractRuleAudit> audits = ContractRuleAudit.find(
            "entityId = ?1 AND timestamp >= ?2 AND timestamp <= ?3 ORDER BY timestamp DESC",
            contractUuid, startDate, endDate
        ).list();

        log.debugf("Found %d audit entries in date range", audits.size());
        return audits;
    }

    /**
     * Get recent audit history (last N entries).
     *
     * @param contractUuid The contract UUID
     * @param limit Maximum number of entries to return
     * @return List of most recent audit entries
     */
    public List<ContractRuleAudit> getRecentAudit(String contractUuid, int limit) {
        log.debugf("Getting last %d audit entries for contract %s", limit, contractUuid);

        List<ContractRuleAudit> audits = ContractRuleAudit.find(
            "entityId = ?1 ORDER BY timestamp DESC",
            contractUuid
        ).page(0, limit).list();

        log.debugf("Returning %d recent audit entries", audits.size());
        return audits;
    }

    /**
     * Get count of audit entries for a contract.
     * Useful for pagination and UI display.
     *
     * @param contractUuid The contract UUID
     * @return Total number of audit entries
     */
    public long getAuditCount(String contractUuid) {
        long count = ContractRuleAudit.count("entityId = ?1", contractUuid);
        log.debugf("Contract %s has %d audit entries", contractUuid, count);
        return count;
    }

    /**
     * Get count of audit entries for a specific rule.
     *
     * @param contractUuid The contract UUID
     * @param ruleId The rule ID
     * @return Number of audit entries for the rule
     */
    public long getAuditCountForRule(String contractUuid, String ruleId) {
        long count = ContractRuleAudit.count(
            "entityId = ?1 AND ruleId = ?2",
            contractUuid, ruleId
        );
        log.debugf("Rule %s has %d audit entries", ruleId, count);
        return count;
    }
}
