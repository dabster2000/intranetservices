version: "3.8"
services:
  intranet2.0:
    container_name: intranet2.0
    image: trustworks/intranet2.0:prod
    env_file:
      - docker-env-intranet.env
    ports:
      - "80:8085"
    networks:
      - frontend
      - backend
    depends_on:
      - twservices
  intranet:
    container_name: intranet
    image: trustworks/intranet:prod
    env_file:
      - docker-env-intranet.env
    environment:
      - JAEGER_AGENT_HOST=jaeger
    ports:
      - "9000:8085"
    networks:
      - frontend
      - backend
    depends_on:
      - twservices
  twservices:
    container_name: twservices
    image: trustworks/twservices:prod
    environment:
      RABBITMQ_HOST: rabbit
      RABBITMQ_PORT: 5672
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    env_file:
      - docker-env-twservices.env
      - userpass.env
      - aws.env
    ports:
      - "9093:9093"
    networks:
      - backend
  rabbit:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"
    networks:
      - backend
  zookeeper:
    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
    networks:
      - backend
  kafka:
    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - backend
networks:
  frontend:
  backend:
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

