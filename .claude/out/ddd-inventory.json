{
  "metadata": {
    "generated": "2025-10-08",
    "version": "1.0",
    "repository": "dk.trustworks.intranet:intranetservices:1.0.0-SNAPSHOT",
    "framework": "Quarkus 3.26.1",
    "javaVersion": "21"
  },
  "statistics": {
    "restEndpoints": 95,
    "reactiveEndpoints": 1,
    "reactiveFraction": 0.01,
    "entities": 125,
    "services": 137,
    "messagingEndpoints": 9,
    "externalRestClients": 8,
    "transactionalMethods": 150
  },
  "aggregateRoots": [
    {
      "rank": 1,
      "name": "LockedBonusPool",
      "score": 95,
      "root": "LockedBonusPoolData",
      "package": "dk.trustworks.intranet.aggregates.invoice.bonus",
      "service": "LockedBonusPoolService",
      "repository": "LockedBonusPoolRepository",
      "members": ["LockedBonusPoolData"],
      "invariants": [
        "Fiscal year uniqueness constraint",
        "Immutability after creation",
        "Checksum integrity verification",
        "Audit trail preservation"
      ],
      "transactionalHotspots": [
        "LockedBonusPoolService.lockBonusPool():88-133",
        "LockedBonusPoolRepository.save():79",
        "LockedBonusPoolRepository.update():91",
        "LockedBonusPoolRepository.delete():102"
      ],
      "coupling": 0.2,
      "asyncReadiness": "Excellent",
      "migrationFitness": {
        "asyncFirst": true,
        "pattern": "Event sourcing with immutable snapshots",
        "benefits": ["Perfect DDD example", "Immutable", "Strong invariants"],
        "challenges": ["None - ideal candidate"]
      },
      "featureLinks": ["Invoice Bonus System"]
    },
    {
      "rank": 2,
      "name": "InvoiceBonus",
      "score": 88,
      "root": "InvoiceBonus",
      "package": "dk.trustworks.intranet.aggregates.invoice.bonus",
      "service": "InvoiceBonusService",
      "members": ["InvoiceBonus", "InvoiceBonusLine"],
      "invariants": [
        "Percent share sum <= 100% per invoice",
        "User uniqueness per invoice",
        "Computed amount consistency",
        "Approval workflow state transitions"
      ],
      "transactionalHotspots": [
        "InvoiceBonusService.addSelfAssign():61-66",
        "InvoiceBonusService.addAdmin():68-72",
        "InvoiceBonusService.addInternal():74-100",
        "InvoiceBonusResource.update():multiple"
      ],
      "coupling": 0.7,
      "asyncReadiness": "Good",
      "migrationFitness": {
        "asyncFirst": false,
        "pattern": "Command pattern with optimistic locking",
        "benefits": ["Strong invariants", "Event-driven ready"],
        "challenges": ["Percent sum validation requires aggregate-level transaction"]
      },
      "featureLinks": ["Invoice Bonus System"]
    },
    {
      "rank": 3,
      "name": "Conference",
      "score": 85,
      "root": "Conference",
      "package": "dk.trustworks.intranet.aggregates.conference",
      "service": "ConferenceService",
      "eventHandler": "ConferenceEventHandler",
      "members": ["Conference", "ConferenceParticipant", "ConferencePhase", "ConferenceMail"],
      "invariants": [
        "Participant uniqueness per conference",
        "Phase transition rules",
        "Budget constraints"
      ],
      "events": [
        "CreateParticipantEvent",
        "UpdateParticipantDataEvent",
        "ChangeParticipantPhaseEvent"
      ],
      "transactionalHotspots": [
        "ConferenceService.createParticipant():32",
        "ConferenceService.updateParticipant():38",
        "ConferenceService.changePhase():63",
        "ConferenceResource.create():103",
        "ConferenceResource.update():119"
      ],
      "coupling": 0.4,
      "asyncReadiness": "Excellent",
      "migrationFitness": {
        "asyncFirst": true,
        "pattern": "Event-driven state machine",
        "benefits": ["Event infrastructure exists", "Clear workflow"],
        "challenges": ["Collection fetch strategy optimization"]
      },
      "featureLinks": ["Knowledge Management"]
    },
    {
      "rank": 4,
      "name": "User",
      "score": 80,
      "root": "User",
      "package": "dk.trustworks.intranet.domain.user.entity",
      "services": ["UserService", "StatusService", "SalaryService", "UserBankInfoService", "UserPensionService"],
      "eventHandler": "UserEventHandler",
      "members": ["User", "UserStatus", "Salary", "UserBankInfo", "UserPension", "UserContactinfo", "Role"],
      "invariants": [
        "Email uniqueness",
        "Username uniqueness",
        "Azure OID uniqueness",
        "Status history consistency",
        "Salary history non-overlap"
      ],
      "events": [
        "CreateUserEvent",
        "UpdateUserEvent",
        "CreateUserStatusEvent",
        "UpdateUserStatusEvent",
        "DeleteUserStatusEvent",
        "CreateSalaryLogEvent",
        "UpdateSalaryEvent",
        "DeleteSalaryEvent"
      ],
      "consumers": ["UserStatusUpdateConsumer", "UserSalaryUpdateConsumer"],
      "transactionalHotspots": [
        "UserService.create():77",
        "UserService.update():361",
        "StatusService.create():45",
        "SalaryService.create():40"
      ],
      "coupling": 0.8,
      "asyncReadiness": "Moderate",
      "migrationFitness": {
        "asyncFirst": false,
        "pattern": "Split into sub-aggregates + CQRS",
        "benefits": ["Event foundation exists", "Already async consumers"],
        "challenges": ["High coupling", "Large aggregate", "Many dependencies"]
      },
      "featureLinks": ["User Management", "Salary", "Status", "Vacation"]
    },
    {
      "rank": 5,
      "name": "Contract",
      "score": 82,
      "root": "Contract",
      "package": "dk.trustworks.intranet.contracts",
      "services": ["ContractService", "ContractValidationService", "ContractConsultantService"],
      "members": ["Contract", "ContractConsultant", "ContractProject", "ContractTypeItem"],
      "invariants": [
        "Date range validity",
        "Consultant allocation no-overlap",
        "Budget consumption <= contract amount",
        "Status transitions",
        "Validation rules"
      ],
      "events": ["ModifyContractConsultantEvent"],
      "consumers": ["ContractConsultantUpdateConsumer"],
      "transactionalHotspots": [
        "ContractService.create():multiple",
        "ContractService.update():multiple",
        "ContractValidationService.validate():multiple"
      ],
      "coupling": 0.65,
      "asyncReadiness": "Good",
      "migrationFitness": {
        "asyncFirst": false,
        "pattern": "Saga for validation + event sourcing",
        "benefits": ["Event foundation", "Clear boundaries"],
        "challenges": ["EAGER fetching", "Complex validation", "Multi-aggregate validation"]
      },
      "featureLinks": ["Contract Management", "Budget Management"]
    },
    {
      "rank": 6,
      "name": "Invoice",
      "score": 78,
      "root": "Invoice",
      "package": "dk.trustworks.intranet.aggregates.invoice",
      "services": ["InvoiceService", "InvoiceGenerator", "InvoiceNotesService", "PricingEngine"],
      "members": ["Invoice", "InvoiceItem", "InvoiceNote"],
      "invariants": [
        "Unique invoice number per company",
        "Total amount = sum(invoice items)",
        "Draft -> Finalized -> Booked workflow",
        "Bonus approval consistency",
        "VAT calculation correctness"
      ],
      "externalIntegrations": ["E-conomic API", "Currency API"],
      "transactionalHotspots": [
        "InvoiceService.create():181",
        "InvoiceService.finalize():397",
        "InvoiceGenerator.generate():69",
        "InvoiceGenerator.regenerate():144"
      ],
      "coupling": 0.6,
      "asyncReadiness": "Good",
      "migrationFitness": {
        "asyncFirst": false,
        "pattern": "Saga for generation + E-conomic sync",
        "benefits": ["I/O bound operations", "Compute-intensive generation"],
        "challenges": ["Pricing engine complexity", "External API coordination"]
      },
      "featureLinks": ["Invoice Management", "Invoice Bonus"]
    },
    {
      "rank": 7,
      "name": "Work",
      "score": 75,
      "root": "Work",
      "package": "dk.trustworks.intranet.dao.workservice",
      "services": ["WorkService", "WorkAggregateService", "WorkCacheRefreshJob"],
      "eventHandler": "WorkEventHandler",
      "members": ["Work", "WorkFull"],
      "invariants": [
        "Date validity",
        "Hours >= 0",
        "User + contract + task + date uniqueness",
        "Work rate consistency"
      ],
      "events": ["UpdateWorkEvent"],
      "consumers": ["WorkUpdateConsumer", "WorkHandler"],
      "transactionalHotspots": [
        "WorkService.create/update/delete():multiple",
        "WorkAggregateService:28",
        "WorkCacheRefreshJob (advisory locking)"
      ],
      "coupling": 0.75,
      "asyncReadiness": "Good",
      "migrationFitness": {
        "asyncFirst": true,
        "pattern": "CQRS with event sourcing",
        "benefits": ["High volume", "Event-driven", "Cache optimization"],
        "challenges": ["High coupling", "Performance critical"]
      },
      "featureLinks": ["Work Tracking", "Revenue", "Utilization", "Invoices"]
    },
    {
      "rank": 8,
      "name": "Expense",
      "score": 76,
      "root": "Expense",
      "package": "dk.trustworks.intranet.expenseservice",
      "services": ["ExpenseAIValidationService", "EconomicsInvoiceStatusService"],
      "members": ["Expense", "ExpenseCategory", "ExpenseAccount", "UserAccount"],
      "invariants": [
        "Amount > 0",
        "Valid category and account",
        "User ownership",
        "Approval workflow",
        "AI validation consistency"
      ],
      "events": ["ExpenseCreatedEvent"],
      "producers": ["ExpenseCreatedProducer"],
      "consumers": ["ExpenseCreatedConsumer", "ExpenseHandler"],
      "externalIntegrations": ["E-conomic API", "OpenAI"],
      "coupling": 0.5,
      "asyncReadiness": "Excellent",
      "migrationFitness": {
        "asyncFirst": true,
        "pattern": "Saga with AI validation + E-conomic sync",
        "benefits": ["Already event-driven", "I/O bound", "AI async-friendly"],
        "challenges": ["AI validation latency", "External API coordination"]
      },
      "featureLinks": ["Expense Management"]
    },
    {
      "rank": 9,
      "name": "MealPlan",
      "score": 72,
      "root": "MealPlan",
      "package": "dk.trustworks.intranet.aggregates.lunch",
      "services": ["MenuService", "SummaryService"],
      "members": ["MealPlan", "MealPlanUser", "MealPlanBuffer", "MealChoice", "MealBuffer"],
      "invariants": [
        "Participant limits",
        "Choice deadlines",
        "Buffer allocation rules"
      ],
      "transactionalHotspots": [
        "MealBufferResource.create():22",
        "MealPlanResource.create():34",
        "MenuResource.create():27",
        "MealChoiceResource.create():23"
      ],
      "coupling": 0.2,
      "asyncReadiness": "Excellent",
      "migrationFitness": {
        "asyncFirst": true,
        "pattern": "Command pattern with event notifications",
        "benefits": ["Self-contained", "Low coupling", "Simple invariants"],
        "challenges": ["None - ideal POC candidate"]
      },
      "featureLinks": ["Lunch Ordering"]
    },
    {
      "rank": 10,
      "name": "Budget",
      "score": 70,
      "root": "Budget",
      "package": "dk.trustworks.intranet.contracts",
      "services": ["BudgetService", "BudgetCalculatingExecutor"],
      "members": ["Budget", "EmployeeBudgetPerDayAggregate"],
      "invariants": [
        "Budget amount >= consumed amount",
        "Date range validity",
        "Allocation consistency"
      ],
      "consumers": ["BudgetUpdateConsumer"],
      "transactionalHotspots": [
        "EmployeeBudgetPerDayAggregate:75",
        "BudgetCalculatingExecutor:multiple"
      ],
      "coupling": 0.5,
      "asyncReadiness": "Good",
      "migrationFitness": {
        "asyncFirst": true,
        "pattern": "CQRS with async calculations",
        "benefits": ["Calculation-intensive", "Event consumer exists"],
        "challenges": ["Consistency with Contract aggregate"]
      },
      "featureLinks": ["Budget Management", "Contract Management"]
    }
  ],
  "features": [
    {
      "name": "Invoice Management",
      "aggregates": ["Invoice", "InvoiceBonus", "LockedBonusPool"],
      "endpoints": 28,
      "coupling": 0.6,
      "asyncBenefit": "High",
      "migrationPriority": "Phase 2-4"
    },
    {
      "name": "Contract Management",
      "aggregates": ["Contract", "Budget"],
      "endpoints": 20,
      "coupling": 0.65,
      "asyncBenefit": "Medium",
      "migrationPriority": "Phase 4"
    },
    {
      "name": "Work Tracking",
      "aggregates": ["Work"],
      "endpoints": 15,
      "coupling": 0.75,
      "asyncBenefit": "High",
      "migrationPriority": "Phase 3"
    },
    {
      "name": "User Management",
      "aggregates": ["User"],
      "endpoints": 40,
      "coupling": 0.8,
      "asyncBenefit": "Medium",
      "migrationPriority": "Phase 4 (late)"
    },
    {
      "name": "Expense Management",
      "aggregates": ["Expense"],
      "endpoints": 10,
      "coupling": 0.5,
      "asyncBenefit": "High",
      "migrationPriority": "Phase 2"
    },
    {
      "name": "Conference Management",
      "aggregates": ["Conference"],
      "endpoints": 15,
      "coupling": 0.4,
      "asyncBenefit": "Medium",
      "migrationPriority": "Phase 3"
    },
    {
      "name": "Lunch Ordering",
      "aggregates": ["MealPlan"],
      "endpoints": 8,
      "coupling": 0.2,
      "asyncBenefit": "Low",
      "migrationPriority": "Phase 1 (POC)"
    },
    {
      "name": "Budget Management",
      "aggregates": ["Budget"],
      "endpoints": 10,
      "coupling": 0.5,
      "asyncBenefit": "Medium",
      "migrationPriority": "Phase 3"
    },
    {
      "name": "Revenue Reporting",
      "aggregates": ["RevenueAggregate"],
      "endpoints": 12,
      "coupling": 0.4,
      "asyncBenefit": "High",
      "migrationPriority": "Phase 5 (parallel)"
    },
    {
      "name": "Utilization Tracking",
      "aggregates": ["UtilizationAggregate"],
      "endpoints": 10,
      "coupling": 0.4,
      "asyncBenefit": "High",
      "migrationPriority": "Phase 5 (parallel)"
    }
  ],
  "migrationRoadmap": {
    "totalDuration": "12 months",
    "phases": [
      {
        "phase": 1,
        "name": "Proof of Concept",
        "duration": "Months 1-2",
        "goal": "Validate async migration approach with minimal risk",
        "aggregates": ["MealPlan", "LockedBonusPool"],
        "successMetrics": {
          "nonBlockingFraction": 0.9,
          "performanceRegression": 0.0,
          "invariantsPreserved": 1.0,
          "teamComfort": "High"
        }
      },
      {
        "phase": 2,
        "name": "I/O Bound Operations",
        "duration": "Months 3-4",
        "goal": "Migrate features with external dependencies",
        "aggregates": ["Expense", "File", "Communication"],
        "successMetrics": {
          "externalAPILatency": "<500ms p99",
          "throughput": "100 concurrent operations",
          "sagaReliability": "99.9%"
        }
      },
      {
        "phase": 3,
        "name": "Event-Driven Aggregates",
        "duration": "Months 5-7",
        "goal": "Migrate aggregates with existing event infrastructure",
        "aggregates": ["Conference", "Work", "Budget"],
        "successMetrics": {
          "eventReplayCapability": true,
          "projectionConsistency": "99.9%",
          "performanceImprovement": "2x"
        }
      },
      {
        "phase": 4,
        "name": "Core Aggregates",
        "duration": "Months 8-12",
        "goal": "Migrate business-critical aggregates with caution",
        "aggregates": ["Contract", "InvoiceBonus", "Invoice", "User"],
        "successMetrics": {
          "invariantsPreserved": 1.0,
          "regressions": 0,
          "performanceImprovement": "3x"
        }
      },
      {
        "phase": 5,
        "name": "Reporting & Optimization",
        "duration": "Months 10-12 (parallel)",
        "goal": "Migrate read-heavy reporting features",
        "aggregates": ["Revenue", "Utilization", "Availability"],
        "successMetrics": {
          "queryLatency": "<100ms p99",
          "performanceImprovement": "5x",
          "cacheHitRate": 0.9
        }
      }
    ]
  },
  "recommendations": [
    {
      "priority": 1,
      "recommendation": "Start with MealPlan aggregate as POC",
      "rationale": "Self-contained, low coupling (0.2), simple invariants, perfect learning project"
    },
    {
      "priority": 2,
      "recommendation": "Migrate I/O bound operations next (Expense, File, Communication)",
      "rationale": "High async benefit, already event-driven foundation, external APIs non-blocking"
    },
    {
      "priority": 3,
      "recommendation": "Leverage existing event infrastructure (Conference, Work)",
      "rationale": "Event handlers, consumers already exist - just need async processing"
    },
    {
      "priority": 4,
      "recommendation": "Use CQRS for high-volume aggregates (Work, Budget, Revenue)",
      "rationale": "Separate read/write models, materialized views, async calculations"
    },
    {
      "priority": 5,
      "recommendation": "Split User aggregate into sub-aggregates",
      "rationale": "High coupling (0.8), large aggregate - split into UserCore, UserEmployment, UserFinancial"
    },
    {
      "priority": 6,
      "recommendation": "Implement saga pattern for multi-aggregate operations",
      "rationale": "Contract validation, Invoice generation, Expense processing need coordinated async operations"
    },
    {
      "priority": 7,
      "recommendation": "Use feature flags for gradual rollout",
      "rationale": "Toggle between sync/async, A/B testing, instant rollback capability"
    },
    {
      "priority": 8,
      "recommendation": "Set up comprehensive monitoring",
      "rationale": "Distributed tracing (Jaeger), metrics (Prometheus), event lag monitoring"
    }
  ],
  "riskMitigation": [
    {
      "risk": "Complexity increase",
      "likelihood": "High",
      "impact": "Medium",
      "mitigation": "Phased approach, start simple, team training, documentation"
    },
    {
      "risk": "Data consistency issues",
      "likelihood": "Medium",
      "impact": "High",
      "mitigation": "Strong test coverage, event replay, monitoring, rollback plan"
    },
    {
      "risk": "Performance degradation",
      "likelihood": "Low",
      "impact": "High",
      "mitigation": "Performance tests per phase, metrics comparison, feature flags"
    },
    {
      "risk": "Team learning curve",
      "likelihood": "High",
      "impact": "Low",
      "mitigation": "Workshops, pair programming, code reviews, 20% timeline buffer"
    }
  ]
}
